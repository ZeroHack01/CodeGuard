# =================================================================
# CodeGuard Enterprise CI/CD Integration Configurations
# Next-generation security analysis platform integrations
# =================================================================

# =========================================
# GitHub Actions Workflow
# File: .github/workflows/codeguard-security.yml
# =========================================

name: CodeGuard Security Analysis

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security analysis daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CODEGUARD_API_URL: ${{ secrets.CODEGUARD_API_URL || 'https://api.codeguard.security' }}
  CODEGUARD_API_KEY: ${{ secrets.CODEGUARD_API_KEY }}
  SCAN_TIMEOUT: 1800  # 30 minutes

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # For SARIF upload
      pull-requests: write   # For PR comments
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
          
      - name: Setup CodeGuard CLI
        run: |
          # Download and install CodeGuard CLI
          curl -L https://github.com/codeguard/cli/releases/latest/download/codeguard-linux-amd64 -o codeguard
          chmod +x codeguard
          sudo mv codeguard /usr/local/bin/
          
      - name: Validate Configuration
        run: |
          codeguard config validate
          codeguard --version
          
      - name: Run Security Analysis
        id: scan
        run: |
          cat > .codeguard.yml << 'EOF'
          api:
            url: ${{ env.CODEGUARD_API_URL }}
            key: ${{ env.CODEGUARD_API_KEY }}
            timeout: ${{ env.SCAN_TIMEOUT }}
          scan:
            analysis_depth: comprehensive
            enable_ml: true
            enable_dataflow: true
            enable_plugins: true
            severity_threshold: Low
            include_patterns:
              - "**/*.py"
              - "**/*.js"
              - "**/*.jsx"
              - "**/*.ts"
              - "**/*.tsx"
              - "**/*.java"
              - "**/*.c"
              - "**/*.cpp"
              - "**/*.php"
              - "**/*.go"
              - "**/*.rs"
              - "**/*.swift"
              - "**/*.kt"
            exclude_patterns:
              - "**/node_modules/**"
              - "**/vendor/**"
              - "**/test/**"
              - "**/tests/**"
              - "**/__pycache__/**"
              - "**/target/**"
              - "**/build/**"
              - "**/dist/**"
          output:
            formats: [sarif, json, pdf]
            sarif_file: codeguard-results.sarif
            json_file: codeguard-results.json
            pdf_file: codeguard-report.pdf
          compliance:
            frameworks: [OWASP-Top-10, SANS-25, PCI-DSS]
            fail_on_critical: true
            fail_on_high: false
            max_critical: 0
            max_high: 5
          EOF
          
          # Run comprehensive security analysis
          codeguard scan . \
            --config .codeguard.yml \
            --output-dir ./security-reports \
            --format sarif,json,pdf \
            --verbose
            
          # Set outputs for other steps
          echo "scan_completed=true" >> $GITHUB_OUTPUT
          echo "sarif_file=./security-reports/codeguard-results.sarif" >> $GITHUB_OUTPUT
          echo "json_file=./security-reports/codeguard-results.json" >> $GITHUB_OUTPUT
          echo "pdf_file=./security-reports/codeguard-report.pdf" >> $GITHUB_OUTPUT
          
      - name: Upload SARIF Results
        if: always() && steps.scan.outputs.scan_completed == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif_file }}
          category: codeguard-security
          
      - name: Generate Security Report Summary
        if: always() && steps.scan.outputs.scan_completed == 'true'
        run: |
          python3 << 'EOF'
          import json
          import os
          
          try:
              with open('./security-reports/codeguard-results.json', 'r') as f:
                  results = json.load(f)
              
              summary = results.get('summary', {})
              risk_assessment = results.get('risk_assessment', {})
              vulnerabilities = results.get('vulnerabilities', [])
              
              # Create markdown summary
              md_content = f"""
          ## üõ°Ô∏è CodeGuard Security Analysis Results
          
          **Overall Risk Level:** {risk_assessment.get('overall_risk_level', 'Unknown')}  
          **Risk Score:** {risk_assessment.get('risk_score', 0):.1f}/10
          
          ### üìä Vulnerability Summary
          
          | Severity | Count |
          |----------|-------|
          | Critical | {summary.get('severity_breakdown', {}).get('Critical', 0)} |
          | High     | {summary.get('severity_breakdown', {}).get('High', 0)} |
          | Medium   | {summary.get('severity_breakdown', {}).get('Medium', 0)} |
          | Low      | {summary.get('severity_breakdown', {}).get('Low', 0)} |
          | Info     | {summary.get('severity_breakdown', {}).get('Info', 0)} |
          
          **Total Issues:** {len(vulnerabilities)}
          
          ### üî• Critical Issues
          """
              
              critical_issues = [v for v in vulnerabilities if v.get('severity') == 'Critical'][:5]
              
              if critical_issues:
                  for i, issue in enumerate(critical_issues, 1):
                      md_content += f"""
          {i}. **{issue.get('issue', 'Unknown Issue')}**
             - File: `{issue.get('file_path', 'Unknown')}`
             - Line: {issue.get('line', 'N/A')}
             - CWE: {issue.get('cwe_id', 'N/A')}
          """
              else:
                  md_content += "\n‚úÖ No critical issues found!\n"
              
              md_content += f"""
          
          ### üìã Compliance Status
          """
              
              compliance = results.get('compliance_status', {})
              for framework, status in compliance.items():
                  score = status.get('compliance_score', 0)
                  violations = status.get('violations', 0)
                  emoji = "‚úÖ" if violations == 0 else "‚ö†Ô∏è" if violations < 5 else "‚ùå"
                  md_content += f"- {emoji} **{framework}:** {score}% ({violations} violations)\n"
              
              md_content += f"""
          
          ### üìà Scan Metadata
          
          - **Duration:** {results.get('scan_metadata', {}).get('duration', 0):.1f}s
          - **Files Scanned:** {results.get('scan_metadata', {}).get('files_scanned', 0)}
          - **Lines Analyzed:** {results.get('scan_metadata', {}).get('lines_scanned', 0)}
          - **Languages:** {', '.join(results.get('scan_metadata', {}).get('languages_detected', []))}
          
          ---
          
          üìÑ [View Full Report](./security-reports/codeguard-report.pdf)  
          üìä [Download JSON Results](./security-reports/codeguard-results.json)  
          üîß [View SARIF Results](./security-reports/codeguard-results.sarif)
          """
              
              # Write summary to file
              with open('security-summary.md', 'w') as f:
                  f.write(md_content)
              
              # Set GitHub environment variables for job summary
              with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
                  f.write(md_content)
                  
              print("Security summary generated successfully")
              
          except Exception as e:
              print(f"Error generating summary: {e}")
              exit(1)
          EOF
          
      - name: Comment on Pull Request
        if: github.event_name == 'pull_request' && steps.scan.outputs.scan_completed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              
              // Find existing comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const existingComment = comments.data.find(
                comment => comment.body.includes('üõ°Ô∏è CodeGuard Security Analysis Results')
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: summary
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: summary
                });
              }
            } catch (error) {
              console.error('Error posting PR comment:', error);
            }
            
      - name: Upload Security Reports
        if: always() && steps.scan.outputs.scan_completed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: codeguard-security-reports
          path: |
            ./security-reports/
            security-summary.md
          retention-days: 30
          
      - name: Fail on Security Issues
        if: always() && steps.scan.outputs.scan_completed == 'true'
        run: |
          # Check if scan should fail based on critical/high issues
          python3 << 'EOF'
          import json
          import sys
          
          try:
              with open('./security-reports/codeguard-results.json', 'r') as f:
                  results = json.load(f)
              
              vulnerabilities = results.get('vulnerabilities', [])
              critical_count = len([v for v in vulnerabilities if v.get('severity') == 'Critical'])
              high_count = len([v for v in vulnerabilities if v.get('severity') == 'High'])
              
              # Fail conditions from config
              max_critical = 0
              max_high = 5
              fail_on_critical = True
              
              if fail_on_critical and critical_count > max_critical:
                  print(f"‚ùå FAIL: {critical_count} critical issues found (max allowed: {max_critical})")
                  sys.exit(1)
              
              if high_count > max_high:
                  print(f"‚ùå FAIL: {high_count} high severity issues found (max allowed: {max_high})")
                  sys.exit(1)
              
              print(f"‚úÖ PASS: Security check passed ({critical_count} critical, {high_count} high)")
              
          except Exception as e:
              print(f"Error checking security results: {e}")
              sys.exit(1)
          EOF

---

# =========================================
# GitLab CI Configuration
# File: .gitlab-ci.yml
# =========================================

stages:
  - security-analysis
  - security-report
  - security-gate

variables:
  CODEGUARD_API_URL: ${CODEGUARD_API_URL:-"https://api.codeguard.security"}
  SCAN_TIMEOUT: "1800"
  DOCKER_IMAGE: "codeguard/enterprise:latest"

# Security Analysis Job
codeguard-security-scan:
  stage: security-analysis
  image: ${DOCKER_IMAGE}
  variables:
    GIT_DEPTH: 0
  script:
    # Configure CodeGuard
    - |
      cat > .codeguard.yml << 'EOF'
      api:
        url: ${CODEGUARD_API_URL}
        key: ${CODEGUARD_API_KEY}
        timeout: ${SCAN_TIMEOUT}
      scan:
        analysis_depth: comprehensive
        enable_ml: true
        enable_dataflow: true
        enable_plugins: true
        severity_threshold: Low
        include_patterns:
          - "**/*.py"
          - "**/*.js"
          - "**/*.jsx"
          - "**/*.ts"
          - "**/*.tsx"
          - "**/*.java"
          - "**/*.c"
          - "**/*.cpp"
          - "**/*.php"
          - "**/*.go"
          - "**/*.rs"
        exclude_patterns:
          - "**/node_modules/**"
          - "**/vendor/**"
          - "**/test/**"
          - "**/tests/**"
          - "**/__pycache__/**"
          - "**/target/**"
          - "**/build/**"
          - "**/dist/**"
      output:
        formats: [sarif, json, pdf, gitlab]
        sarif_file: codeguard-results.sarif
        json_file: codeguard-results.json
        pdf_file: codeguard-report.pdf
        gitlab_file: gl-sast-report.json
      compliance:
        frameworks: [OWASP-Top-10, SANS-25, PCI-DSS]
      EOF
    
    # Run security analysis
    - mkdir -p security-reports
    - codeguard scan . --config .codeguard.yml --output-dir ./security-reports --verbose
    
    # Generate GitLab Security Report format
    - |
      python3 << 'EOF'
      import json
      import uuid
      from datetime import datetime
      
      # Convert CodeGuard results to GitLab SAST format
      try:
          with open('./security-reports/codeguard-results.json', 'r') as f:
              codeguard_results = json.load(f)
          
          vulnerabilities = codeguard_results.get('vulnerabilities', [])
          
          # Convert to GitLab format
          gitlab_report = {
              "version": "14.0.0",
              "vulnerabilities": [],
              "scan": {
                  "analyzer": {
                      "id": "codeguard",
                      "name": "CodeGuard Enterprise",
                      "url": "https://codeguard.security",
                      "version": "3.0.0"
                  },
                  "scanner": {
                      "id": "codeguard-enterprise",
                      "name": "CodeGuard Enterprise Scanner"
                  },
                  "type": "sast",
                  "start_time": datetime.now().isoformat(),
                  "end_time": datetime.now().isoformat(),
                  "status": "success"
              }
          }
          
          severity_mapping = {
              "Critical": "Critical",
              "High": "High", 
              "Medium": "Medium",
              "Low": "Low",
              "Info": "Info"
          }
          
          for vuln in vulnerabilities:
              gitlab_vuln = {
                  "id": str(uuid.uuid4()),
                  "category": "sast",
                  "name": vuln.get('issue', 'Security Issue'),
                  "description": vuln.get('description', ''),
                  "severity": severity_mapping.get(vuln.get('severity'), 'Unknown'),
                  "confidence": "High",
                  "solution": vuln.get('recommendation', ''),
                  "scanner": {
                      "id": "codeguard-enterprise",
                      "name": "CodeGuard Enterprise"
                  },
                  "location": {
                      "file": vuln.get('file_path', ''),
                      "start_line": vuln.get('line', 1),
                      "end_line": vuln.get('end_line', vuln.get('line', 1))
                  },
                  "identifiers": []
              }
              
              # Add CWE identifier if available
              if vuln.get('cwe_id'):
                  gitlab_vuln["identifiers"].append({
                      "type": "cwe",
                      "name": vuln.get('cwe_id'),
                      "value": vuln.get('cwe_id')
                  })
              
              # Add OWASP identifier if available
              if vuln.get('owasp_category'):
                  gitlab_vuln["identifiers"].append({
                      "type": "owasp",
                      "name": vuln.get('owasp_category'),
                      "value": vuln.get('owasp_category')
                  })
              
              gitlab_report["vulnerabilities"].append(gitlab_vuln)
          
          # Write GitLab format report
          with open('./security-reports/gl-sast-report.json', 'w') as f:
              json.dump(gitlab_report, f, indent=2)
          
          print(f"GitLab SAST report generated with {len(gitlab_report['vulnerabilities'])} vulnerabilities")
          
      except Exception as e:
          print(f"Error generating GitLab report: {e}")
          exit(1)
      EOF
      
  artifacts:
    reports:
      sast: security-reports/gl-sast-report.json
    paths:
      - security-reports/
    expire_in: 30 days
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

# Security Report Generation
codeguard-security-report:
  stage: security-report
  image: ${DOCKER_IMAGE}
  needs: ["codeguard-security-scan"]
  dependencies:
    - codeguard-security-scan
  script:
    # Generate comprehensive security report
    - |
      python3 << 'EOF'
      import json
      import os
      
      try:
          with open('./security-reports/codeguard-results.json', 'r') as f:
              results = json.load(f)
          
          summary = results.get('summary', {})
          risk_assessment = results.get('risk_assessment', {})
          vulnerabilities = results.get('vulnerabilities', [])
          compliance = results.get('compliance_status', {})
          
          # Create detailed markdown report
          report = f"""
      # üõ°Ô∏è CodeGuard Enterprise Security Analysis Report
      
      **Project:** {os.environ.get('CI_PROJECT_NAME', 'Unknown')}
      **Branch:** {os.environ.get('CI_COMMIT_REF_NAME', 'Unknown')}
      **Commit:** {os.environ.get('CI_COMMIT_SHA', 'Unknown')[:8]}
      **Pipeline:** {os.environ.get('CI_PIPELINE_ID', 'Unknown')}
      
      ## üìä Executive Summary
      
      | Metric | Value |
      |--------|-------|
      | Overall Risk Level | **{risk_assessment.get('overall_risk_level', 'Unknown')}** |
      | Risk Score | {risk_assessment.get('risk_score', 0):.1f}/10 |
      | Total Vulnerabilities | {len(vulnerabilities)} |
      | Critical Issues | {summary.get('severity_breakdown', {}).get('Critical', 0)} |
      | High Severity Issues | {summary.get('severity_breakdown', {}).get('High', 0)} |
      
      ## üîç Detailed Analysis
      
      ### Vulnerability Breakdown
      
      | Severity | Count | Percentage |
      |----------|-------|------------|
      """
          
          total_vulns = len(vulnerabilities)
          for severity in ['Critical', 'High', 'Medium', 'Low', 'Info']:
              count = summary.get('severity_breakdown', {}).get(severity, 0)
              percentage = (count / total_vulns * 100) if total_vulns > 0 else 0
              report += f"| {severity} | {count} | {percentage:.1f}% |\n"
          
          # Add critical issues details
          critical_issues = [v for v in vulnerabilities if v.get('severity') == 'Critical']
          if critical_issues:
              report += "\n### üî• Critical Issues Requiring Immediate Attention\n\n"
              for i, issue in enumerate(critical_issues[:10], 1):
                  report += f"""
      #### {i}. {issue.get('issue', 'Unknown Issue')}
      
      - **File:** `{issue.get('file_path', 'Unknown')}`
      - **Line:** {issue.get('line', 'N/A')}
      - **CWE:** {issue.get('cwe_id', 'N/A')}
      - **OWASP:** {issue.get('owasp_category', 'N/A')}
      - **Risk Score:** {issue.get('risk_score', 0):.1f}/10
      
      **Description:** {issue.get('description', 'No description available')}
      
      **Recommendation:** {issue.get('recommendation', 'No recommendation available')}
      
      ---
      """
          
          # Add compliance status
          report += "\n## üìã Compliance Framework Analysis\n\n"
          if compliance:
              for framework, status in compliance.items():
                  score = status.get('compliance_score', 0)
                  violations = status.get('violations', 0)
                  status_emoji = "‚úÖ" if violations == 0 else "‚ö†Ô∏è" if violations < 5 else "‚ùå"
                  report += f"- {status_emoji} **{framework}:** {score}% compliance ({violations} violations)\n"
          else:
              report += "No compliance analysis available.\n"
          
          # Add recommendations
          recommendations = results.get('recommendations', [])
          if recommendations:
              report += "\n## üí° Remediation Recommendations\n\n"
              for i, rec in enumerate(recommendations[:5], 1):
                  report += f"""
      ### {i}. {rec.get('category', 'General').replace('_', ' ').title()}
      
      **Priority:** {rec.get('priority', 'Medium')}
      **Affected Files:** {rec.get('affected_files', 0)}
      **Total Issues:** {rec.get('total_issues', 0)}
      
      {rec.get('recommendation', 'No specific recommendation available')}
      
      """
          
          # Write report
          with open('security-analysis-report.md', 'w') as f:
              f.write(report)
          
          print("Comprehensive security report generated")
          
      except Exception as e:
          print(f"Error generating report: {e}")
          exit(1)
      EOF
      
  artifacts:
    paths:
      - security-analysis-report.md
    expire_in: 30 days
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

# Security Quality Gate
codeguard-security-gate:
  stage: security-gate
  image: ${DOCKER_IMAGE}
  needs: ["codeguard-security-scan"]
  dependencies:
    - codeguard-security-scan
  script:
    # Implement security quality gate
    - |
      python3 << 'EOF'
      import json
      import sys
      import os
      
      try:
          with open('./security-reports/codeguard-results.json', 'r') as f:
              results = json.load(f)
          
          vulnerabilities = results.get('vulnerabilities', [])
          
          # Count vulnerabilities by severity
          critical_count = len([v for v in vulnerabilities if v.get('severity') == 'Critical'])
          high_count = len([v for v in vulnerabilities if v.get('severity') == 'High'])
          medium_count = len([v for v in vulnerabilities if v.get('severity') == 'Medium'])
          
          # Quality gate thresholds (configurable via CI variables)
          max_critical = int(os.environ.get('SECURITY_MAX_CRITICAL', '0'))
          max_high = int(os.environ.get('SECURITY_MAX_HIGH', '5'))
          max_medium = int(os.environ.get('SECURITY_MAX_MEDIUM', '20'))
          
          failed_checks = []
          
          if critical_count > max_critical:
              failed_checks.append(f"Critical vulnerabilities: {critical_count} (max: {max_critical})")
          
          if high_count > max_high:
              failed_checks.append(f"High vulnerabilities: {high_count} (max: {max_high})")
          
          if medium_count > max_medium:
              failed_checks.append(f"Medium vulnerabilities: {medium_count} (max: {max_medium})")
          
          if failed_checks:
              print("‚ùå Security Quality Gate FAILED")
              print("\nFailed checks:")
              for check in failed_checks:
                  print(f"  - {check}")
              print(f"\nTotal vulnerabilities found: {len(vulnerabilities)}")
              print("Please fix the security issues before proceeding.")
              sys.exit(1)
          else:
              print("‚úÖ Security Quality Gate PASSED")
              print(f"Vulnerabilities found: {critical_count} critical, {high_count} high, {medium_count} medium")
              print("All security checks passed successfully.")
              
      except Exception as e:
          print(f"Error in security gate: {e}")
          sys.exit(1)
      EOF
      
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

---

# =========================================
# Jenkins Pipeline Configuration
# File: Jenkinsfile
# =========================================

pipeline {
    agent {
        docker {
            image 'codeguard/enterprise:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        CODEGUARD_API_URL = credentials('codeguard-api-url')
        CODEGUARD_API_KEY = credentials('codeguard-api-key')
        SCAN_TIMEOUT = '1800'
        SECURITY_REPORT_DIR = 'security-reports'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timeout(time: 45, unit: 'MINUTES')
        timestamps()
        skipDefaultCheckout()
    }
    
    stages {
        stage('Checkout & Prepare') {
            steps {
                checkout scm
                
                script {
                    // Set build display name
                    currentBuild.displayName = "#${env.BUILD_NUMBER} - ${env.BRANCH_NAME}"
                    
                    // Create security reports directory
                    sh "mkdir -p ${env.SECURITY_REPORT_DIR}"
                    
                    // Generate CodeGuard configuration
                    writeFile file: '.codeguard.yml', text: """
api:
  url: ${env.CODEGUARD_API_URL}
  key: ${env.CODEGUARD_API_KEY}
  timeout: ${env.SCAN_TIMEOUT}

scan:
  analysis_depth: comprehensive
  enable_ml: true
  enable_dataflow: true
  enable_plugins: true
  severity_threshold: Low
  include_patterns:
    - "**/*.py"
    - "**/*.js"
    - "**/*.jsx"
    - "**/*.ts"
    - "**/*.tsx"
    - "**/*.java"
    - "**/*.c"
    - "**/*.cpp"
    - "**/*.php"
    - "**/*.go"
    - "**/*.rs"
    - "**/*.swift"
    - "**/*.kt"
  exclude_patterns:
    - "**/node_modules/**"
    - "**/vendor/**"
    - "**/test/**"
    - "**/tests/**"
    - "**/__pycache__/**"
    - "**/target/**"
    - "**/build/**"
    - "**/dist/**"

output:
  formats: [sarif, json, pdf, junit]
  sarif_file: codeguard-results.sarif
  json_file: codeguard-results.json
  pdf_file: codeguard-report.pdf
  junit_file: codeguard-junit.xml

compliance:
  frameworks: [OWASP-Top-10, SANS-25, PCI-DSS]
  fail_on_critical: true
  fail_on_high: false
  max_critical: 0
  max_high: 5

jenkins:
  publish_junit: true
  archive_artifacts: true
  send_notifications: true
"""
                }
            }
        }
        
        stage('Security Analysis') {
            steps {
                echo 'Starting CodeGuard Enterprise security analysis...'
                
                script {
                    try {
                        // Run CodeGuard scan
                        sh """
                            codeguard scan . \\
                                --config .codeguard.yml \\
                                --output-dir ./${env.SECURITY_REPORT_DIR} \\
                                --format sarif,json,pdf,junit \\
                                --verbose
                        """
                        
                        // Mark scan as successful
                        env.SCAN_SUCCESS = 'true'
                        
                    } catch (Exception e) {
                        // Handle scan failures
                        env.SCAN_SUCCESS = 'false'
                        env.SCAN_ERROR = e.getMessage()
                        error("Security scan failed: ${e.getMessage()}")
                    }
                }
            }
            
            post {
                always {
                    // Archive security reports
                    archiveArtifacts artifacts: "${env.SECURITY_REPORT_DIR}/**/*", 
                                   fingerprint: true, 
                                   allowEmptyArchive: true
                    
                    // Publish JUnit test results
                    script {
                        if (fileExists("${env.SECURITY_REPORT_DIR}/codeguard-junit.xml")) {
                            publishTestResults testResultsPattern: "${env.SECURITY_REPORT_DIR}/codeguard-junit.xml"
                        }
                    }
                }
            }
        }
        
        stage('Security Report Generation') {
            when {
                environment name: 'SCAN_SUCCESS', value: 'true'
            }
            
            steps {
                script {
                    // Generate comprehensive security report
                    sh """
                        python3 << 'EOF'
import json
import os
from datetime import datetime

try:
    with open('./${env.SECURITY_REPORT_DIR}/codeguard-results.json', 'r') as f:
        results = json.load(f)
    
    summary = results.get('summary', {})
    risk_assessment = results.get('risk_assessment', {})
    vulnerabilities = results.get('vulnerabilities', [])
    scan_metadata = results.get('scan_metadata', {})
    
    # Generate HTML report
    html_report = f'''
<!DOCTYPE html>
<html>
<head>
    <title>CodeGuard Security Analysis Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ background: #f8f9fa; padding: 20px; border-left: 5px solid #007bff; }}
        .summary {{ display: flex; justify-content: space-around; margin: 20px 0; }}
        .metric {{ text-align: center; padding: 15px; background: #f1f3f4; border-radius: 8px; }}
        .critical {{ background: #ffebee; border-left: 5px solid #f44336; }}
        .high {{ background: #fff3e0; border-left: 5px solid #ff9800; }}
        .medium {{ background: #f3e5f5; border-left: 5px solid #9c27b0; }}
        .low {{ background: #e8f5e8; border-left: 5px solid #4caf50; }}
        .vulnerability {{ margin: 15px 0; padding: 15px; border-radius: 8px; }}
        .code {{ background: #f5f5f5; padding: 10px; font-family: monospace; border-radius: 4px; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üõ°Ô∏è CodeGuard Enterprise Security Analysis Report</h1>
        <p><strong>Project:</strong> {os.environ.get('JOB_NAME', 'Unknown')}</p>
        <p><strong>Build:</strong> #{os.environ.get('BUILD_NUMBER', 'Unknown')}</p>
        <p><strong>Branch:</strong> {os.environ.get('BRANCH_NAME', 'Unknown')}</p>
        <p><strong>Generated:</strong> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    </div>
    
    <h2>üìä Executive Summary</h2>
    <div class="summary">
        <div class="metric">
            <h3>{risk_assessment.get('overall_risk_level', 'Unknown')}</h3>
            <p>Risk Level</p>
        </div>
        <div class="metric">
            <h3>{risk_assessment.get('risk_score', 0):.1f}/10</h3>
            <p>Risk Score</p>
        </div>
        <div class="metric">
            <h3>{len(vulnerabilities)}</h3>
            <p>Total Issues</p>
        </div>
        <div class="metric">
            <h3>{scan_metadata.get('duration', 0):.1f}s</h3>
            <p>Scan Duration</p>
        </div>
    </div>
    
    <h2>üîç Vulnerability Breakdown</h2>
    <div class="summary">
        <div class="metric critical">
            <h3>{summary.get('severity_breakdown', {}).get('Critical', 0)}</h3>
            <p>Critical</p>
        </div>
        <div class="metric high">
            <h3>{summary.get('severity_breakdown', {}).get('High', 0)}</h3>
            <p>High</p>
        </div>
        <div class="metric medium">
            <h3>{summary.get('severity_breakdown', {}).get('Medium', 0)}</h3>
            <p>Medium</p>
        </div>
        <div class="metric low">
            <h3>{summary.get('severity_breakdown', {}).get('Low', 0)}</h3>
            <p>Low</p>
        </div>
    </div>
    '''
    
    # Add critical vulnerabilities
    critical_vulns = [v for v in vulnerabilities if v.get('severity') == 'Critical'][:10]
    if critical_vulns:
        html_report += '<h2>üî• Critical Vulnerabilities</h2>'
        for vuln in critical_vulns:
            html_report += f'''
        <div class="vulnerability critical">
            <h3>{vuln.get('issue', 'Unknown Issue')}</h3>
            <p><strong>File:</strong> {vuln.get('file_path', 'Unknown')} 
               <strong>Line:</strong> {vuln.get('line', 'N/A')}</p>
            <p><strong>Description:</strong> {vuln.get('description', 'No description')}</p>
            <div class="code">{vuln.get('code', 'Code not available')}</div>
            <p><strong>Recommendation:</strong> {vuln.get('recommendation', 'No recommendation')}</p>
            <p><strong>CWE:</strong> {vuln.get('cwe_id', 'N/A')} 
               <strong>OWASP:</strong> {vuln.get('owasp_category', 'N/A')}</p>
        </div>
            '''
    
    html_report += '''
</body>
</html>
    '''
    
    # Write HTML report
    with open('./${env.SECURITY_REPORT_DIR}/security-report.html', 'w') as f:
        f.write(html_report)
    
    print("HTML security report generated successfully")
    
except Exception as e:
    print(f"Error generating HTML report: {e}")
    exit(1)
EOF
                    """
                    
                    // Publish HTML report
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: env.SECURITY_REPORT_DIR,
                        reportFiles: 'security-report.html',
                        reportName: 'CodeGuard Security Report',
                        reportTitles: 'Security Analysis Results'
                    ])
                }
            }
        }
        
        stage('Security Quality Gate') {
            when {
                environment name: 'SCAN_SUCCESS', value: 'true'
            }
            
            steps {
                script {
                    // Implement security quality gate
                    def qualityGateResult = sh(
                        script: """
                            python3 << 'EOF'
import json
import sys

try:
    with open('./${env.SECURITY_REPORT_DIR}/codeguard-results.json', 'r') as f:
        results = json.load(f)
    
    vulnerabilities = results.get('vulnerabilities', [])
    
    # Count by severity
    critical_count = len([v for v in vulnerabilities if v.get('severity') == 'Critical'])
    high_count = len([v for v in vulnerabilities if v.get('severity') == 'High'])
    
    # Quality gate thresholds
    max_critical = 0
    max_high = 5
    
    print(f"Security Quality Gate Results:")
    print(f"Critical vulnerabilities: {critical_count} (max: {max_critical})")
    print(f"High vulnerabilities: {high_count} (max: {max_high})")
    
    if critical_count > max_critical:
        print(f"FAIL: Too many critical vulnerabilities ({critical_count} > {max_critical})")
        sys.exit(1)
    
    if high_count > max_high:
        print(f"FAIL: Too many high severity vulnerabilities ({high_count} > {max_high})")
        sys.exit(1)
    
    print("PASS: Security quality gate passed")
    
except Exception as e:
    print(f"Error in quality gate: {e}")
    sys.exit(1)
EOF
                        """,
                        returnStatus: true
                    )
                    
                    if (qualityGateResult != 0) {
                        currentBuild.result = 'FAILURE'
                        error("Security quality gate failed")
                    }
                }
            }
        }
        
        stage('Notification') {
            when {
                anyOf {
                    environment name: 'SCAN_SUCCESS', value: 'true'
                    environment name: 'SCAN_SUCCESS', value: 'false'
                }
            }
            
            steps {
                script {
                    // Send notifications based on results
                    def scanStatus = env.SCAN_SUCCESS == 'true' ? 'SUCCESS' : 'FAILURE'
                    def color = scanStatus == 'SUCCESS' ? 'good' : 'danger'
                    def message = scanStatus == 'SUCCESS' ? 
                        'CodeGuard security analysis completed successfully' : 
                        "CodeGuard security analysis failed: ${env.SCAN_ERROR}"
                    
                    // Slack notification (if configured)
                    try {
                        slackSend(
                            channel: '#security',
                            color: color,
                            message: """
üõ°Ô∏è *CodeGuard Security Analysis - ${scanStatus}*

*Project:* ${env.JOB_NAME}
*Build:* #${env.BUILD_NUMBER}
*Branch:* ${env.BRANCH_NAME}

${message}

<${env.BUILD_URL}|View Build> | <${env.BUILD_URL}CodeGuard_Security_Report/|View Report>
                            """
                        )
                    } catch (Exception e) {
                        echo "Slack notification failed: ${e.getMessage()}"
                    }
                    
                    // Email notification (if configured)
                    try {
                        emailext(
                            subject: "CodeGuard Security Analysis - ${scanStatus} - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                            body: """
Security analysis has completed with status: ${scanStatus}

Project: ${env.JOB_NAME}
Build: #${env.BUILD_NUMBER}
Branch: ${env.BRANCH_NAME}

${message}

View full report: ${env.BUILD_URL}CodeGuard_Security_Report/
                            """,
                            to: "${env.CHANGE_AUTHOR_EMAIL ?: 'security-team@company.com'}"
                        )
                    } catch (Exception e) {
                        echo "Email notification failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        
        success {
            echo '‚úÖ CodeGuard security analysis pipeline completed successfully'
        }
        
        failure {
            echo '‚ùå CodeGuard security analysis pipeline failed'
        }
        
        unstable {
            echo '‚ö†Ô∏è CodeGuard security analysis pipeline completed with warnings'
        }
    }
}

---

# =========================================
# Azure DevOps Pipeline
# File: azure-pipelines.yml
# =========================================

trigger:
  branches:
    include:
      - main
      - develop
      - release/*
  paths:
    exclude:
      - docs/*
      - README.md

pr:
  branches:
    include:
      - main
      - develop

variables:
  - group: CodeGuard-Security  # Variable group with API credentials
  - name: CODEGUARD_API_URL
    value: 'https://api.codeguard.security'
  - name: SCAN_TIMEOUT
    value: '1800'
  - name: DOCKER_IMAGE
    value: 'codeguard/enterprise:latest'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: SecurityAnalysis
    displayName: 'Security Analysis'
    jobs:
      - job: CodeGuardScan
        displayName: 'CodeGuard Security Scan'
        timeoutInMinutes: 45
        
        container:
          image: $(DOCKER_IMAGE)
          
        steps:
          - checkout: self
            fetchDepth: 0
            
          - task: Bash@3
            displayName: 'Configure CodeGuard'
            inputs:
              targetType: 'inline'
              script: |
                cat > .codeguard.yml << 'EOF'
                api:
                  url: $(CODEGUARD_API_URL)
                  key: $(CODEGUARD_API_KEY)
                  timeout: $(SCAN_TIMEOUT)
                scan:
                  analysis_depth: comprehensive
                  enable_ml: true
                  enable_dataflow: true
                  enable_plugins: true
                  severity_threshold: Low
                  include_patterns:
                    - "**/*.py"
                    - "**/*.js"
                    - "**/*.jsx"
                    - "**/*.ts"
                    - "**/*.tsx"
                    - "**/*.java"
                    - "**/*.c"
                    - "**/*.cpp"
                    - "**/*.php"
                    - "**/*.go"
                    - "**/*.rs"
                  exclude_patterns:
                    - "**/node_modules/**"
                    - "**/test/**"
                    - "**/tests/**"
                output:
                  formats: [sarif, json, pdf]
                compliance:
                  frameworks: [OWASP-Top-10, SANS-25, PCI-DSS]
                EOF
                
                mkdir -p security-reports
                
          - task: Bash@3
            displayName: 'Run Security Analysis'
            inputs:
              targetType: 'inline'
              script: |
                codeguard scan . \
                  --config .codeguard.yml \
                  --output-dir ./security-reports \
                  --format sarif,json,pdf \
                  --verbose
                  
          - task: PublishTestResults@2
            displayName: 'Publish Security Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: 'security-reports/codeguard-results.sarif'
              testRunTitle: 'CodeGuard Security Analysis'
              
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Security Reports'
            condition: always()
            inputs:
              PathtoPublish: 'security-reports'
              ArtifactName: 'CodeGuard-Security-Reports'
              
          - task: PowerShell@2
            displayName: 'Security Quality Gate'
            inputs:
              targetType: 'inline'
              script: |
                $results = Get-Content -Path "security-reports/codeguard-results.json" | ConvertFrom-Json
                $vulnerabilities = $results.vulnerabilities
                
                $criticalCount = ($vulnerabilities | Where-Object { $_.severity -eq "Critical" }).Count
                $highCount = ($vulnerabilities | Where-Object { $_.severity -eq "High" }).Count
                
                $maxCritical = 0
                $maxHigh = 5
                
                Write-Host "Security Quality Gate Results:"
                Write-Host "Critical vulnerabilities: $criticalCount (max: $maxCritical)"
                Write-Host "High vulnerabilities: $highCount (max: $maxHigh)"
                
                if ($criticalCount -gt $maxCritical) {
                    Write-Host "##vso[task.logissue type=error]Too many critical vulnerabilities: $criticalCount > $maxCritical"
                    exit 1
                }
                
                if ($highCount -gt $maxHigh) {
                    Write-Host "##vso[task.logissue type=error]Too many high vulnerabilities: $highCount > $maxHigh"  
                    exit 1
                }
                
                Write-Host "##vso[task.complete result=Succeeded;]Security quality gate passed"
