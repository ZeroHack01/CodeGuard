name: Mock Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Setup Mock Security Scanner
        run: |
          mkdir -p ./security-reports
          
      - name: Run Mock Security Analysis
        id: scan
        run: |
          # Create mock security results
          python3 << 'EOF'
          import json
          import random
          
          # Generate mock vulnerability data
          mock_vulnerabilities = [
              {
                  "issue": "Potential SQL Injection",
                  "description": "User input is not properly sanitized before database query",
                  "file_path": "src/database.py",
                  "line": 45,
                  "severity": "High",
                  "cwe_id": "CWE-89",
                  "recommendation": "Use parameterized queries"
              },
              {
                  "issue": "Cross-Site Scripting (XSS)",
                  "description": "User input rendered without escaping",
                  "file_path": "templates/user_profile.html", 
                  "line": 23,
                  "severity": "Medium",
                  "cwe_id": "CWE-79",
                  "recommendation": "Escape user input before rendering"
              }
          ]
          
          # Create mock results structure
          results = {
              "summary": {
                  "severity_breakdown": {
                      "Critical": 0,
                      "High": 1,
                      "Medium": 1,
                      "Low": 0,
                      "Info": 0
                  }
              },
              "risk_assessment": {
                  "overall_risk_level": "Medium",
                  "risk_score": 3.5
              },
              "vulnerabilities": mock_vulnerabilities,
              "compliance_status": {
                  "OWASP-Top-10": {
                      "compliance_score": 85,
                      "violations": 2
                  }
              },
              "scan_metadata": {
                  "duration": 12.3,
                  "files_scanned": 47,
                  "lines_scanned": 2340,
                  "languages_detected": ["python", "javascript", "html"]
              }
          }
          
          # Write results
          with open('./security-reports/codeguard-results.json', 'w') as f:
              json.dump(results, f, indent=2)
          
          # Create mock SARIF file
          sarif_results = {
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [{
                  "tool": {
                      "driver": {
                          "name": "MockSecurityScanner",
                          "version": "1.0.0"
                      }
                  },
                  "results": [
                      {
                          "ruleId": "sql-injection",
                          "message": {"text": "Potential SQL Injection"},
                          "level": "error",
                          "locations": [{
                              "physicalLocation": {
                                  "artifactLocation": {"uri": "src/database.py"},
                                  "region": {"startLine": 45}
                              }
                          }]
                      }
                  ]
              }]
          }
          
          with open('./security-reports/codeguard-results.sarif', 'w') as f:
              json.dump(sarif_results, f, indent=2)
          
          print("Mock security scan completed")
          EOF
          
          echo "scan_completed=true" >> $GITHUB_OUTPUT
          echo "sarif_file=./security-reports/codeguard-results.sarif" >> $GITHUB_OUTPUT
          echo "json_file=./security-reports/codeguard-results.json" >> $GITHUB_OUTPUT
          
      - name: Upload SARIF Results
        if: always() && steps.scan.outputs.scan_completed == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scan.outputs.sarif_file }}
          category: mock-security
          
      - name: Generate Security Report Summary
        if: always() && steps.scan.outputs.scan_completed == 'true'
        run: |
          python3 << 'EOF'
          import json
          import os
          
          try:
              with open('./security-reports/codeguard-results.json', 'r') as f:
                  results = json.load(f)
              
              summary = results.get('summary', {})
              risk_assessment = results.get('risk_assessment', {})
              vulnerabilities = results.get('vulnerabilities', [])
              
              md_content = f"""
          ## üõ°Ô∏è Mock Security Analysis Results
          
          **Overall Risk Level:** {risk_assessment.get('overall_risk_level', 'Unknown')}  
          **Risk Score:** {risk_assessment.get('risk_score', 0):.1f}/10
          
          ### üìä Vulnerability Summary
          
          | Severity | Count |
          |----------|-------|
          | Critical | {summary.get('severity_breakdown', {}).get('Critical', 0)} |
          | High     | {summary.get('severity_breakdown', {}).get('High', 0)} |
          | Medium   | {summary.get('severity_breakdown', {}).get('Medium', 0)} |
          | Low      | {summary.get('severity_breakdown', {}).get('Low', 0)} |
          | Info     | {summary.get('severity_breakdown', {}).get('Info', 0)} |
          
          **Total Issues:** {len(vulnerabilities)}
          
          ### üî• Issues Found
          """
              
              for i, issue in enumerate(vulnerabilities[:5], 1):
                  md_content += f"""
          {i}. **{issue.get('issue', 'Unknown Issue')}** ({issue.get('severity', 'Unknown')})
             - File: `{issue.get('file_path', 'Unknown')}`
             - Line: {issue.get('line', 'N/A')}
             - CWE: {issue.get('cwe_id', 'N/A')}
             - Fix: {issue.get('recommendation', 'No recommendation')}
          """
              
              md_content += "\n> ‚ö†Ô∏è This is a **mock security analysis** for testing purposes.\n"
              
              with open('security-summary.md', 'w') as f:
                  f.write(md_content)
              
              with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
                  f.write(md_content)
                  
              print("Security summary generated successfully")
              
          except Exception as e:
              print(f"Error generating summary: {e}")
          EOF
          
      - name: Upload Security Reports
        if: always() && steps.scan.outputs.scan_completed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: mock-security-reports
          path: |
            ./security-reports/
            security-summary.md
          retention-days: 30
